/*Entering a number in a text box on AIO determines the number of blinks of on-board USR3 LED. In general, this message/number received by the BBB can be used to determine what to do next; e.g., invoke another program, save the messages in a file, etc. Must use Molloyâ€™s LED class.

Name: subscribe_textBox.cpp
Build: build_testBox.sh
Executable: subscribe_textBox
 * */

#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "MQTTClient.h"
#include "LED.h"
using namespace std;

#define ADDRESS     "tcp://io.adafruit.com:1883"
#define CLIENTID    "Beagle2"
#define TOPIC       "sadamsjones/feeds/blinky"
#define AUTHMETHOD  "sadamsjones"
#define AUTHTOKEN   "aio_Nyma52CUy2nPBEvVbQXpDr8YyZvl"
#define QOS         1
#define TIMEOUT     10000L
#define LED_GPIO    "/sys/class/gpio/gpio60/"
#define LED_PATH    "/sys/class/leds/beaglebone:green:usr3"
#define THRESHOLD   30
#define USR3         3


volatile MQTTClient_deliveryToken deliveredtoken;

void delivered(void *context, MQTTClient_deliveryToken dt) {
    printf("Message with token value %d delivery confirmed\n", dt);
    deliveredtoken = dt;
}

int msgarrvd(void *context, char *topicName, int topicLen, MQTTClient_message *message) {
    int i;
    char* payloadptr;
    LED led(USR3);
    printf("Message arrived\n");
    printf("     topic: %s\n", topicName);
    printf("   message: ");
    payloadptr = (char*) message->payload; //point the char element message (input from AIO) to payload, assign the contents of this address to a pointer
    int blinks = atoi(payloadptr); //assign the value from Adafruit IO into the variable blinks, atof converts string to double
    printf("Blink the LED %d times\n", blinks);
       
    for(i=0; i<blinks; i++){ //blink LED 3 for a number equal to the blink input
	    led.turnOn();
	    sleep(1);
 	    led.turnOff();
	    sleep(1);
    }

    MQTTClient_freeMessage(&message);
    MQTTClient_free(topicName);
    return 1;
}

void connlost(void *context, char *cause) {
    printf("\nConnection lost\n");
    printf("     cause: %s\n", cause);
}

int main(int argc, char* argv[]) {
    MQTTClient client;
    MQTTClient_connectOptions opts = MQTTClient_connectOptions_initializer;
    int rc;
    int ch;
    //writeGPIO("direction", "out");
    //writeLED("","")
    MQTTClient_create(&client, ADDRESS, CLIENTID, MQTTCLIENT_PERSISTENCE_NONE, NULL);
    opts.keepAliveInterval = 20;
    opts.cleansession = 1;
    opts.username = AUTHMETHOD;
    opts.password = AUTHTOKEN;
    MQTTClient_setCallbacks(client, NULL, connlost, msgarrvd, delivered);
    if ((rc = MQTTClient_connect(client, &opts)) != MQTTCLIENT_SUCCESS) {
        printf("Failed to connect, return code %d\n", rc);
        exit(-1);
    }
    printf("Subscribing to topic %s\nfor client %s using QoS%d\n\n"
           "Press Q<Enter> to quit\n\n", TOPIC, CLIENTID, QOS);
    MQTTClient_subscribe(client, TOPIC, QOS);

    do {
        ch = getchar();
    } while(ch!='Q' && ch != 'q');
    MQTTClient_disconnect(client, 10000);
    MQTTClient_destroy(&client);
    return rc;
}
